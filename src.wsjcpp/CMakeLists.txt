# Automaticly generated by wsjcpp@v0.0.1
cmake_minimum_required(VERSION 3.0)

add_definitions(-DWSJCPP_VERSION="v0.0.1")
add_definitions(-DWSJCPP_NAME="wsjcpp-storages")

if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    set(MACOSX TRUE)
endif()

set(CMAKE_CXX_STANDARD 11)

set (WSJCPP_LIBRARIES "")
set (WSJCPP_INCLUDE_DIRS "")
set (WSJCPP_SOURCES "")

# wsjcpp/wsjcpp-core:v0.0.3
list (APPEND WSJCPP_INCLUDE_DIRS "./src.wsjcpp/wsjcpp_wsjcpp_core/")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_wsjcpp_core/wsjcpp_core.cpp")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_wsjcpp_core/wsjcpp_core.h")

# nlohmann/json:v3.7.3
list (APPEND WSJCPP_INCLUDE_DIRS "./src.wsjcpp/nlohmann_json/")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/nlohmann_json/json.hpp")

# required-libraries
list (APPEND WSJCPP_LIBRARIES "-lpthread")

# required-pkg-config
## CURL
FIND_PACKAGE(CURL)
IF(CURL_FOUND)
   list (APPEND WSJCPP_INCLUDE_DIRS ${CURL_INCLUDE_DIR})
   list (APPEND WSJCPP_LIBRARIES ${CURL_LIBRARIES})
ELSE(CURL_FOUND)
   MESSAGE(FATAL_ERROR "Could not find the CURL library and development files.")
ENDIF(CURL_FOUND)


